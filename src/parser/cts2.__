/*
 * LEXICAL SCANNER
 * ================================
 * var parser = require("./cts2-parser.js").parser
 */

%lex

special    [\{\}\:\;|]
nonspecial [^\{\}\:\;]
url        [^ \n\r\f\t]

%%

[ \t\r\n\f]+						{return 'S';}
\/\*[^*]*\*+([^/][^*]*\*+)*\/		{}								/* ignore comment */

"url("{url}+") { return 'URI'; }
"@tree"			    			{return 'TREE_SYM';}
"@css"	     					{return 'CSS_SYM';}
"@js"     						{return 'JS_SYM';}
":"{nonspecial}*	  	{return 'RELATION';}
{nonspecial}+         {return 'WORD';}
.    								{return yytext;}

/lex

%start treesheet

%%

treesheet
  : header_list relation_list
    %{
      $$ = {
        headers: $1,
        relations: $2
      };
      return $$;
    %}
  | relation_list
    %{
      $$ = {
        relations: $1
      };
      return $$;
    %}
  ;

header_list
  : header_item
    %{
      $$ = [];
      if ($1 !== null)
        $$.push($1);
    %}
  | header_list header_item
    %{
      $$ = $1;
      if ($2 !== null)
        $$.push($2);
    %}
  ;

header_item
  : tree_item
  | css_item
  | js_item
  ;

tree_item
  : TREE_SYM space WORD space WORD space URI ';' wempty
    %{
      $$ = ['tree', $3, $5, $7];
    %}
  ;

css_item
  : CSS_SYM space URI ';' wempty
    %{
      $$ = ['css', $3];
    %}
  ;

js_item
  : JS_SYM space URI ';' wempty
    %{
      $$ = ['js', $3];
    %}
  ;

relation_list
  : relation_item
    %{
      $$ = [];
      if ($1 !== null)
        $$.push($1);
    %}
  | relation_list relation_item
    ${
      $$ = $1;
      if ($2 !== null)
        $$.push($2);
    $}
  ;

relation_item
  : firstselector relator secondselector ';' wempty
    %{
      $$ = [$1, $2, $3];
    %}
  ;

eitherselector
  : selectorstring wempty props
    %{
      $$ = {
        selectorString: $1,
        props: $3
      };
    %}
  | treevar wempty selectorstring wempty props
    %{
      $$ = {
        treeName: $1,
        selectorString: $3,
        props: $5
      };
    %}
  ;

firstselector
  : selectorstring space
    %{
      $$ = {
        selectorString: $1
      };
    %}
  | treevar wempty selectorstring space 
    %{
      $$ = {
        treeName: $1,
        selectorString: $3
      };
    %}
  | eitherselector
  ;

treevar
  : word wempty '|' -> $1
  ;

secondselector
  : selectorstring wempty
    %{
      $$ = {
        selectorString: $1
      };
    %}
  | treevar wempty selectorstring wempty
    %{
      $$ = {
        treeName: $1,
        selectorString: $3
      };
    %}
  | eitherselector
  ;

relator
  : relatorstring wempty props
    %{
      $$ = {
        name: $1,
        props: $3
      };
    %}
  | relatorstring space
    %{
      $$ = {
        name: $1
      };
    %}
  ;

selectorstring
  : WORD -> $1
  ;

relatorstring
  : ':' WORD -> $2
  ;

props
  : '{' wempty proplist '}' wempty -> $3
  ;

proplist
  : IDENT -> $1
  ;

space
  : S -> ' '
  | whitespace S -> ' '
  ;

wempty
  : whitespace -> $1
  | -> ""
  ;

